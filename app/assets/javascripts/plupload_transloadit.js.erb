$(document).ready(function(){
   
  $("#loading_uploader_notification").fadeOut();
  $("#upload_picture").fadeIn();
  
  
  $("#uploadifive_wrapper_table").show();
  // $("#file_upload").uploadify("disable", true);
  
  
  
  
  
  
  var params_value = $("#params").attr("value");
  var signature_value = $("#signature").attr("value");
  var wait_value = $("#wait").attr("value");
  
  var uploaded_file = {};
  var pic_id_array = [];
   
  var check_image_processing_progress = 0 ;
  
  var is_from_cancel =0 ;
  var uploading_started= false; 
   
  var is_done_resizing = false;
    
  var failed_upload_file_name_list = [] ;
  var server_url = $("#server_url").attr('value');
  
  
  var uploader = $("#uploader").pluploadQueue({
     // General settings
     runtimes : 'html5',
     url : '<%= TRANSLOADIT_UPLOAD_URL.html_safe %>',
     // max_file_size : '10mb',
      //          chunk_size : '1mb',
     // unique_names : true,
    dragdrop : false,  
     // Flash settings
     flash_swf_url : '<%= PLUPLOAD_SWF_URL.html_safe %>',
  
     // Silverlight settings
     silverlight_xap_url : '<%= PLUPLOAD_SILVERLIGHT_XAP_URL.html_safe %>',
      preinit : {
        Init: function(up, info) {
       
          
        },
  
        UploadFile: function(up, file) {
          // log('[UploadFile]', file);
  
          // You can override settings before the file is uploaded
          // up.settings.url = 'upload.php?id=' + file.id;
          uploading_started = true  ;
          
          $("#preloader").show();
          $("#upload_cancel").show();
          
        
          up.settings.multipart_params =  {
            'params' : params_value,
            'signature' : signature_value,
            'wait' : true,
            'blocking': true,
            'autoSubmit': false, 
            'monkey' : false,
            'alter_ego' : true 
          };
          // console.log("upload file is done");
        }
      }, 
     // Post init events, bound after the internal events
     init : {
       Refresh: function(up) {
         // Called when upload shim is moved
         // console.log('[Refresh]');
       },
  
       StateChanged: function(up) {
         // Called when the state of the queue is changed
          // console.log('[StateChanged]', up.state == plupload.STARTED ? "STARTED" : "STOPPED");
       },
  
       QueueChanged: function(up) {
         // Called when the files in queue are changed by adding/removing files
         // console.log('[QueueChanged]');
       },
  
       UploadProgress: function(up, file) {
         // Called while a file is being uploaded
         // console.log('[UploadProgress]', 'File:', file, "Total:", up.total);
       },
  
       FilesAdded: function(up, files) {
         // Callced when files are added to queue
         // console.log('[FilesAdded]');
  
         selected_counter = selected_counter+ files.length ;
         // plupload.each(files, function(file) {
          //                console.log('  File:', file);
          //              });
          $("#selected_counter").text(selected_counter);
       },
  
       FilesRemoved: function(up, files) {
         // Called when files where removed from queue
         // console.log('[FilesRemoved]');
         selected_counter = selected_counter - files.length ; 
         $("#selected_counter").text(selected_counter);
    // on remove, reduce the number of selected counter by 1 
         // plupload.each(files, function(file) {
        //                console.log('  File:', file);
        //              });
       },
  
       FileUploaded: function(up, file, info) {
        
         if( file.status == plupload.FAILED) {
           // console.log("THe upload fails");
           failed_counter  = failed_counter + 1 ; 
           $("#failed_counter").text( failed_counter );
           $("#fail-list").append("<li>" + file.name +"</li>");
         }else if(file.status ==  plupload.DONE){
           
           // the return value is not parsed
           parsedData = jQuery.parseJSON( info["response"] ); 
           
           // uploaded counter increased.. but processed counter is not increased yet
           uploaded_counter +=1 ;
           $("#uploaded_counter").text(uploaded_counter);
           // is_done_resizing = false; 
           checkTransloaditResizing(parsedData);
         } 
       },
  
       ChunkUploaded: function(up, file, info) { 
       },
  
       Error: function(up, args) { 
       }
     }
      
  });

 
  
  
  function checkTransloaditResizing(parsedData){
    // if( is_done_resizing == true ) {
    //           return false; 
    //         } 
    
    console.log("Assembly_url : " + parsedData["assembly_url"] );
    $.ajax({
      url: parsedData["assembly_url"],
      type: "GET", 
      dataType: 'json',
      success: function(response){  
        // auto parsed to be json 
        parsedData = response;  
      }
    });
    
    console.log("Result of resizing checking: "+  parsedData["ok"]);
    if(parsedData["ok"] == "ASSEMBLY_COMPLETED" && is_done_resizing == false){
      console.log("The output data is done/.. hahaha");
      // is_done_resizing = true; 
      
      $.ajax({
        url:  server_url ,
        type: "POST",
        data: {
          'results' : parsedData['results']
        },
        dataType: 'script',
        success: function(response){  
          processed_counter += 1 
          $("#processed_counter").text(processed_counter);
          // is_done_resizing = false; 
          checkUploadFinished();
        }
      });  
    }else{ 
      setTimeout(function(){ 
          checkTransloaditResizing(parsedData); 
          }, 3000); 
    }
  }
  

  function totalProcessedFile(){
    var counter  = 0 ; 

    for( var i = 0 ;  i < pic_id_array.length ; i++){
      if( uploaded_file[pic_id_array[i]]   ==  1 ){
        counter += 1;
      }
    }
    return counter; 
  }

  function isUploadFinished(){ 
    var upload_success_counter = selected_counter - failed_counter ; 
    
    if( (uploaded_counter == processed_counter)  && 
          ( uploaded_counter == upload_success_counter ) ){
      return true;
    }else{
      return false; 
    }
  }

  function checkUploadFinished(){ 
    if( isUploadFinished()  ){ 
      if( failed_counter ==0  ) { 
        window.location.reload(true);
      }else{
        // show the warning 
        $("#fail-upload-alert-wrapper").show();
        $("#fail-alert-list").replaceWith($("#fail-list") );
        $("#upload_cancel").hide();
        $("#preloader").hide();
      } 
    }
  };


  // upload starter
  $("#upload_starter").click(function(){
    // $('#file_upload').uploadifive('upload');
    // console.log("clicked upload");
    // $('#file_upload').uploadify('upload', '*');
    // $("#file_upload").uploadify('disable', true);
  
    uploader = $('#uploader').pluploadQueue();
    uploader.start();
    $("#file_upload_loading").show();

    $("#upload_cancel").show();
    $("#preloader").show();
    $("#upload_starter").hide();
    return false;
  });


  $("#upload_cancel").click(function(){
    uploader = $('#uploader').pluploadQueue();
    uploader.stop();
    $("#preloader").hide();
    $("#upload_starter").show();
    $(this).hide();
    return false;
    // window.location.reload(true);

    //  hide the cancel, refresh
  });



});